import jsPDF from "jspdf";
import { EducationReport } from "@/hooks/useEducationReports";
import { Student } from "@/hooks/useStudents";
import { Class } from "@/hooks/useClasses";
import { loadUrduFont } from "./urduFont";

interface ExportData {
  reports: EducationReport[];
  students: Student[];
  classes: Class[];
}

export const exportEducationReportsToPDF = async ({ reports, students, classes }: ExportData) => {
  const doc = new jsPDF();
  
  // Load Urdu font
  await loadUrduFont(doc);
  
  // Set Urdu font for all text
  try {
    doc.setFont("NotoNastaliqUrdu");
  } catch (error) {
    console.warn("Urdu font not available, using default font");
  }
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  const margin = 15;
  let yPosition = margin;

  // Helper functions
  const getStudentName = (studentId: string) => {
    const student = students.find(s => s.id === studentId);
    return student?.name || "Unknown Student";
  };

  const getClassName = (classId?: string) => {
    if (!classId) return "No Class";
    const cls = classes.find(c => c.id === classId);
    return cls?.name || "Unknown Class";
  };

  const checkPageBreak = (requiredSpace: number) => {
    if (yPosition + requiredSpace > pageHeight - margin) {
      doc.addPage();
      yPosition = margin;
      return true;
    }
    return false;
  };

  // Header
  doc.setFontSize(20);
  doc.text("Learning Report / تعلیمی رپورٹ", pageWidth / 2, yPosition, { align: "center" });
  yPosition += 10;

  doc.setFontSize(10);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, pageWidth / 2, yPosition, { align: "center" });
  yPosition += 15;

  // Total Reports Summary
  doc.setFontSize(12);
  doc.text(`Total Reports: ${reports.length}`, margin, yPosition);
  yPosition += 10;

  // Sort reports by date (newest first)
  const sortedReports = [...reports].sort((a, b) => 
    new Date(b.date).getTime() - new Date(a.date).getTime()
  );

  // Generate report cards
  sortedReports.forEach((report, index) => {
    checkPageBreak(70);

    // Report Card Border
    const cardHeight = 65;
    doc.setDrawColor(100, 100, 100);
    doc.setLineWidth(0.5);
    doc.rect(margin, yPosition, pageWidth - 2 * margin, cardHeight);

    // Report Header
    const cardTop = yPosition + 5;
    doc.setFontSize(12);
    doc.text(`${index + 1}. ${getStudentName(report.student_id)}`, margin + 5, cardTop);
    
    doc.setFontSize(9);
    doc.text(`Date: ${new Date(report.date).toLocaleDateString()}`, pageWidth - margin - 5, cardTop, { align: "right" });

    // Student Info
    let cardY = cardTop + 6;
    doc.setFontSize(9);
    doc.text(`Father: ${report.father_name}`, margin + 5, cardY);
    doc.text(`Class: ${getClassName(report.class_id)}`, pageWidth / 2, cardY);

    // Divider line
    cardY += 4;
    doc.setDrawColor(200, 200, 200);
    doc.line(margin + 5, cardY, pageWidth - margin - 5, cardY);
    cardY += 5;

    // Sabak Section
    doc.text("Sabak / سبق:", margin + 5, cardY);
    cardY += 4;
    doc.setFontSize(8);
    doc.text(`Para: ${report.sabak?.para_no || 'N/A'}`, margin + 8, cardY);
    doc.text(`Amount: ${report.sabak?.amount || 'N/A'}`, margin + 45, cardY);

    // Sabqi Section
    cardY += 5;
    doc.setFontSize(9);
    doc.text("Sabqi / سبقی:", margin + 5, cardY);
    cardY += 4;
    doc.setFontSize(8);
    doc.text(`Recited: ${report.sabqi?.recited ? 'Yes' : 'No'}`, margin + 8, cardY);
    doc.text(`Amount: ${report.sabqi?.amount || 'N/A'}`, margin + 45, cardY);

    // Manzil Section
    cardY += 5;
    doc.setFontSize(9);
    doc.text("Manzil / منزل:", margin + 5, cardY);
    cardY += 4;
    doc.setFontSize(8);
    doc.text(`Number: ${report.manzil?.number || 'N/A'}`, margin + 8, cardY);

    // Remarks (if any)
    if (report.remarks) {
      cardY += 5;
      doc.setFontSize(8);
      const remarksText = `Remarks: ${report.remarks}`;
      const splitRemarks = doc.splitTextToSize(remarksText, pageWidth - 2 * margin - 15);
      doc.text(splitRemarks, margin + 5, cardY);
    }

    yPosition += cardHeight + 8;
  });

  // Footer on last page
  doc.setFontSize(8);
  doc.text(
    `Report generated by Imam Tools Suite - ${new Date().toLocaleString()}`,
    pageWidth / 2,
    pageHeight - 10,
    { align: "center" }
  );

  // Save the PDF
  const fileName = `Learning_Reports_${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
};
